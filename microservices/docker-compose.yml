version: '3.9'
services:
  # MongoDB for Product Service
  product-backend:
    image: kartago124/product-backend
    container_name: product-backend
    ports:
      - "8080:8080"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://172.31.86.25:27017/database
    networks:
      - backend-network

  # Order Service
  api-order:
    image: kartago124/order-backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres@172.31.86.25:5432/order
    ports:
      - "8000:8000"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "172.31.86.25"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-backend:
    build: ./user
    container_name: user-backend
    env_file:
      - ./user/.env
    environment:
      MYSQL_HOST: 172.31.86.25
      MYSQL_PORT: 3306
      MYSQL_USER: user
      MYSQL_PASSWORD: userpassword
      MYSQL_DATABASE: userdb
    ports:
      - "8081:8081"
    volumes:
      - ./user:/app
      - /app/node_modules
    networks:
      - backend-network

  # Orchestrator Service
  orchestrator:
    build: ./orchestrator  # Asume que el orquestador est√° en el directorio ./orchestrator
    container_name: orchestrator
    ports:
      - "3000:3000"  # Puerto para el orquestador
    networks:
      - backend-network
    depends_on:
      - api-order
      - product-backend
      - user-backend

networks:
  backend-network:
    driver: bridge
