version: "3.9"
services:
  # MongoDB for Product Service
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: database
    networks:
      - backend-network
    volumes:
      - mongo-data:/data/db

  # Product Service
  product-backend:
    image: kartago124/product-backend
    container_name: product-backend
    ports:
      - "8080:8080"
    depends_on:
      - mongo
    networks:
      - backend-network
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/database

  # Postgres for Order Service
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: order
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Order Service
  api-order:
    build: ./order/api
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/order
    ports:
      - 8000:8000
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL for User Service
  mysql-db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: userdb
      MYSQL_USER: user
      MYSQL_PASSWORD: userpassword
    ports:
      - "3307:3307"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./user/CloudDB-User.sql:/docker-entrypoint-initdb.d/CloudDB-User.sql
    networks:
      - backend-network

  # User Service
  user-backend:
    build: ./user
    container_name: user-backend
    env_file:
      - ./user/.env
    depends_on:
      - mysql-db
    ports:
      - "8081:8081"
    volumes:
      - ./user:/app
      - /app/node_modules
    networks:
      - backend-network

    # Orchestrator Service
  orchestrator:
    build: ./orchestrator # Asume que el orquestador est√° en el directorio ./orchestrator
    container_name: orchestrator
    ports:
      - "3000:3000" # Puerto para el orquestador
    networks:
      - backend-network
    depends_on:
      - api-order
      - product-backend
      - user-backend

networks:
  backend-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  postgres_data:
    driver: local
  mysql-data:
    driver: local
